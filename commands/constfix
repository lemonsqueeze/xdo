#!/usr/bin/perl
# fix const strings refs in disassembled files
use strict;
#use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";	 # Find modules in ../lib
use common;

global_init();

sub usage
{    
    print q{
usage: xdo constfix [-cp classpath]

replace constant strings / class references in disassembled files
to make xdo parser's life easier.

};
    exit 1;
}

if (@ARGV && $ARGV[0] =~ m/^(-h|-help|--help)$/)  {  usage();  }

(-d "jar") || die "No jar directory, open a jar first.\n";
chdir "jar" || die "Couldn't cd jar/\n";

open(FILES, "find . -name '*.j' |");
my @FILES = <FILES>;  chomp(@FILES);
close(FILES);
if (!@FILES) { die "No disassembled classes found. Run dasm first.\n"; }


################################################################################

my $re_const = qr|\[([a-z]+[0-9]+)\]|;

sub file_fix_const
{
    my ($asm) = @_;
    my $out = "${asm}.new";
    my $classfile = "$asm"; $classfile =~ s|\.j|\.class|;
    
    open(IN, "< $asm") || die "couldn't open $asm";
    open(OUT, "> $out") || die "couldn't write to $out";
    my @tab = <IN>;
    close(IN);

    # first get consts definitions
    # only handle named references for now
    my %const;
    foreach my $s (@tab) {
	if ($s =~ m|^\.const $re_const = Utf8 (.*) $|   ||
	    $s =~ m|^\.const $re_const = Class (.*) $|  ||
	    $s =~ m|^\.const $re_const = (.*) $|)
	{
	    my ($name, $val) = ($1, $2);
	    $const{"$name"} = $val;	# named reference
	    #print "$name:$val\n";
	}
    }

    # and replace ...
    foreach my $s (@tab) {
	# skip .const and ldc* instr, don't want to replace there (would have to deal with quotes)
	if ($s =~ m/^\.const/ ||
	    $s =~ m/^[L0-9: \t]* ldc/)
	{   print OUT $s;  next;   }

	while ($s =~ m/^(.* )$re_const( .*)$/)
	{
	    my $val = $const{$2};
	    $val || die "$asm: undefined const string '[$2]'\n$s\n";
	    $s = "$1$val$3\n";
	}
	
	print OUT $s;
    }
    
    close(OUT);
    rename($out, $asm);
    unlink($classfile);
}


use class_info;
get_class_info(@FILES);

print "Fixing methods consts ...\n";
# Fixes external cached classes as well !
foreach my $file (all_class_files())
{  
    printf("%-70s\r", $file);
    file_fix_const($file);  
}
printf("%-70s\r", "");
