#!/usr/bin/perl
# fix const strings refs in disassembled files
use strict;
#use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";	 # Find modules in ../lib
use common;

global_init();

sub usage
{    
    print q{
usage: xdo constfix [-cp classpath]

replace constant strings / class references in disassembled files
to make xdo parser's life easier.

};
    exit 1;
}

if (@ARGV && $ARGV[0] =~ m/^(-h|-help|--help)$/)  {  usage();  }

(-d "jar") || die "No jar directory, open a jar first.\n";
chdir "jar" || die "Couldn't cd jar/\n";

open(FILES, "find . -name '*.j' |");
my @FILES = <FILES>;  chomp(@FILES);
close(FILES);
if (!@FILES) { die "No disassembled classes found. Run dasm first.\n"; }

# Methods we want to rename
my $re_meth_match = qr|[0-9a-zA-Z_<>]+|;		# any

################################################################################

use class_info;
get_class_info(@FILES);

################################################################################

my $re_const = qr|\[([a-z]+[0-9]+)\]|;
my %const;

sub parse_consts
{
    my ($asm) = @_;

    open(IN, "< $asm") || die "couldn't open $asm";

    my $classname;
    while (my $s = <IN>)
    {
	if (my %c = parse_class($s, $asm))  {  $classname = $c{class};  }

	if ($s =~ m|^\.const $re_const = Utf8 (.*) $|   ||
	    $s =~ m|^\.const $re_const = Class (.*) $|  ||
	    $s =~ m|^\.const $re_const = (.*) $|)
	{  
	    my ($name, $val) = ($1, $2);
	    $const{"$classname:$name"} = $val;
	    #print "$classname:$name:$val\n";
	}
    }

    close(IN);    
}

print "Looking up consts ...\n";
foreach my $file (all_class_files())
{  
    parse_consts($file);
}

################################################################################


sub file_fix_const
{
    my ($asm) = @_;    
    my $out = "${asm}.new";
    my $classfile = "$asm"; $classfile =~ s|\.j|\.class|;
    
    open(IN, "< $asm") || die "couldn't open $asm";
    open(OUT, "> $out") || die "couldn't write to $out";

    my $classname;
    for (; my $s = <IN>; print OUT $s)
    {
	if (my %c = parse_class($s, $asm))  {  $classname = $c{class};  }
	
	# skip .const and ldc* instr, don't want to replace there
	if ($s =~ m/^\.const/ ||
	    $s =~ m/^[L0-9: \t]* ldc/)
	{   next;   }

	while ($s =~ m/^(.*)$re_const(.*)$/)
	{
	    my $val = $const{"$classname:$2"};
	    $val || die "$asm: undefined const string '[$2]'\n$s\n";
	    $s = "$1$val$3\n";
	}
    }
    
    close(OUT);
    close(IN);
    rename($out, $asm);
    unlink($classfile);
}

print "Fixing methods consts ...\n";
# Fixes external cached classes as well !
foreach my $file (all_class_files())
{  
    printf("%-70s\r", $file);
    file_fix_const($file);  
}
printf("%-70s\r", "");
