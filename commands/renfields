#!/usr/bin/perl
# rename all fields based on field type
use FindBin;
use lib "$FindBin::Bin/../lib";	 # Find modules in ../lib
use common;

global_init();

sub usage
{    
    print q{
rename all fields based on field type.

usage: xdo renfields [-cp classpath]

For example

  class Foo
  {
      String a;
      int b;
      int c;
      Object d;
      Object e;
      int f;
  }

is renamed as:

  class Foo
  {
      String String1;
      int i1;
      int i2;
      Object Object1;
      Object Object2;
      int i3;
  }

};
    exit 1;
}

if ($ARGV[0] =~ m/^(-h|-help|--help)$/)  {  usage();  }

(-d "jar") || die "No jar directory, open a jar first.\n";
chdir "jar" || die "Couldn't cd jar/\n";

open(FILES, "find . -name '*.j' |");
my @FILES = <FILES>;  chomp(@FILES);
close(FILES);
if (!@FILES) { die "No disassembled classes found. Run dasm first.\n"; }


################################################################################

use class_info;
get_class_info(@FILES);

################################################################################


use rename_fields;

sub find_new_field_name
{    
    my ($class, $basename, $count) = @_;

    # If only one field of this type try without number
    if ($count == 1 && !new_field_defined($class, $basename))
    {  return $basename;  }

    for (my $i = 1;  ; $i++)	
    {  
	my $newname = "$basename$i";
	if (!new_field_defined($class, $newname))
	{  return $newname;  }
    }
}

sub type_to_field_basename
{
    my ($type, $asm) = @_;
    if ($type =~ m/^[A-Z]$/) { return lc($type); }
    if ($type =~ m|^L([0-9a-zA-Z_\$/]+);$|)
    {
	my @parts = split("/", $1);
	my $class = pop(@parts);
	$class =~ s|\$|_|g;   # Inner classes -> '_'
	return $class;
    }
    if ($type =~ m|^(\[+)([^[]*)$|)
    {
	return type_to_field_basename($2);	# Nothing special for arrays for now ...
    }
    die "$asm: unknown type: '$type'";
}


sub field_renamer
{
    my ($class, $field, $type, $count, $asm) = @_;
    my $basename = type_to_field_basename($type, $asm);
    return find_new_field_name($class, $basename, $count);
}


print "Getting fields mapping ...\n";
get_fields_mapping(\&field_renamer);


################################################################################


rename_fields(@FILES);

