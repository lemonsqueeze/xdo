#!/usr/bin/perl
# recreate localvariabletable (debug methods arguments in jdb)
use FindBin;
use lib "$FindBin::Bin/../lib";	 # Find modules in ../lib
$| = 1;

(-d "jar") || die "No jar directory, open a jar first.\n";
chdir "jar" || die "Couldn't cd jar/\n";

open(FILES, "find . -name '*.j' |");
my @FILES = <FILES>;  chomp(@FILES);
close(FILES);
if (!@FILES) { die "No disassembled classes found. Run dasm first.\n"; }

my $re_class = qr|[0-9a-zA-Z_\$/]+|;
my $re_types = qr|[A-Za-z0-9_;/[\$]+|;
my $re_method = qr|[0-9a-zA-Z_]+|;	# matches any method except <init>, <clinit>
my $re_any_method = qr|[0-9a-zA-Z_<>]+|;
my $re_uconst = qr|\[u[0-9]+\]|;

# Methods we want to rename
my $re_meth_match = qr|[0-9a-zA-Z_]{1,3}|;	# 3 letters max
#my $re_meth_match = qr|[0-9a-zA-Z_]+|;		# any

################################################################################

sub check_method_type
{
    my ($file, $class, $method, $type) = @_;
    if ($type =~ m|^$re_uconst|) {  die "$file: $class.$method() call: uconst type found\n" .
					"run fix_methods_uconst first\n"; }
    if (!($type =~ m|^\(|)) {  die "$file: $class.$method() call: unhandled method type '$type'"; }
}

sub pick_arg_name
{
    my ($i, $type, $static, $arg_names) = @_;
    if ($i == 0 && !$static) { return "this"; }
    
    my $basename = "xxx";
    if ($type =~ m|^L.*;$|)  { $basename = "o";  }
    elsif ($type =~ m|^([A-Z])$|)  { $basename = lc($1); }
    elsif ($type =~ m|^[[]|) { $basename = "arr"; }

    my $j;
    for ($j = 1; $arg_names->{"$basename$j"}; $j++) { }
    $arg_names->{"$basename$j"} = 1;
    return "$basename$j";
}

sub method_args_types
{
    my ($class, $meth_type, $static) = @_;
    ($meth_type =~ m|\(([^)]*)\)|)  || die "shouldn't happen";
    my $args_types = $1;

    my @types;
    if (!$static) { push(@types, "L$class;"); }

    while ($args_types)
    {
	if ($args_types =~ m|^([[]*L[^;]*;)(.*)|)
	{
	    my ($type, $next) = ($1, $2);
	    push(@types, $type);
	    $args_types = $next;
	    next;
	}
	if ($args_types =~ m|^([[]*[A-Z])(.*)|)
	{
	    my ($type, $next) = ($1, $2);
	    push(@types, $type);
	    $args_types = $next;
	    next;
	}
	die "ughh: $args_types";
    }

    return @types;
}

sub print_local_variable_table
{
    my ($out, $class, $meth_type, $static, $last_label) = @_;
    my @arg_types = method_args_types($class, $meth_type, $static);
    my %arg_names;
    if (!(@arg_types)) { return; }

    print $out "        .localvariabletable\n";
    my $i = 0;
    foreach my $type (@arg_types)
    {
	my $name = pick_arg_name($i, $type, $static, \%arg_names);
	# 0 is this Ltmp/gob; from L0 to L7
	print $out "            $i is $name $type from L0 to $last_label\n";
	$i++;
    }
    print $out "        .end localvariabletable\n";
}

sub restore_debug_info
{
    my ($asm) = @_;    
    my $out = "${asm}.new";
    my $classfile = "$asm"; $classfile =~ s|\.j|\.class|;
    
    open(IN, "< $asm") || die "couldn't open $asm";
    open(OUT, "> $out") || die "couldn't write to $out";

    my $drop = 0;
    my $classname;
    my $in_method = 0;
    my $meth_type;
    my $static;
    my $label;
    for (; my $s = <IN>; $drop || print OUT $s)
    {
	if ($s =~ m|^\.class.* ($re_class) *$|)  {  $classname = $1;  }
	if ($s =~ m|^(L[0-9]+):|)  {  $label = $1;  }

	if ($s =~ m|(^\.method.*) ($re_any_method) : ([^ ]*)|)
	{  
	    my ($decl, $method, $type) = ($1, $2, $3);
	    check_method_type($asm, $classname, $method, $type);
	    
	    $static = ($decl =~ m|static|);
	    $meth_type = $type;
	    $in_method = 1;
	}

	if ($s =~ m|^        \.localvariabletable| && $in_method)     { $drop = 1;  }
	if ($s =~ m|^        \.end localvariabletable| && $in_method) { $drop = 0; $s = ""; }

	if ($s =~ m|^    \.end code| && $in_method)
	{
	    print_local_variable_table(OUT, $classname, $meth_type, $static, $label);
	}

	if ($s =~ m|^\.end method|) {  $in_method = 0; }
    }
    
    close(OUT);
    close(IN);
    rename($out, $asm);
    unlink($classfile);
}

print "Restoring debug info ...\n";
foreach my $file (@FILES)
{  
    printf("%-70s\r", $file);
    restore_debug_info($file);  
}
printf("%-70s\r", "");
