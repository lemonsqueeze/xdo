#!/usr/bin/perl
# rename / repackage classes
use strict;
#use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";	 # Find modules in ../lib
use common;

global_init();

sub usage
{    
print q{
usage: xdo move [options] <src> <dest>

rename / repackage classes matching <src> and fix all references
to them in others.

<src> may contain '*' and '**' wildcards:
  '*'  matches any single class or directory
  '**' matches any class at any depth further down

corresponding matches may be referred to as $1, $2 etc in <dest>,
while $0 is the full class name. Renames may not result in clashes.

options:
  --auto-rename   automatically rename classes to avoid clashes
  -cp classpath   jars for external dependencies

bugs:
- if app uses Class.forName() and hardcoded class names to load
  classes, repackaging classes may break it. move will warn if it
  finds Class.forName() calls and list lines that need fixing for
  obvious cases.
- you should run xdo constfix first otherwise types in const strings
  won't be renamed. 
- if command fails in the middle of a move, working dir will be left
  in an inconsistent state. backup jar/ directory first so you can
  restore it later if move fails.

examples:
  move pkg/Foo  pkg/Bar
      rename one class

  move '*'  'pkg/$1'
      move all classes in default package to pkg/

  move --auto-rename '**/*'  'pkg/$2'
      collapse all other classes into pkg/, renaming classes
      in case of clashes.

  move 'google/**'  'thirdparty/google/$1'
      repackage google classes under thirdparty/
};
    exit 1;
}


my $auto_rename = 0;

for (; $ARGV[0] =~ m/^-/; shift @ARGV)
{
    if ($ARGV[0] =~ m/^(-h|-help|--help)$/)  {  usage();  }
    if ($ARGV[0] eq "--auto-rename")  {  $auto_rename = 1; next; }
    die "unknown option: $ARGV[0]\n";
}

(-d "jar") || die "No jar directory, open a jar first.\n";
chdir "jar" || die "Couldn't cd jar/\n";

open(FILES, "find . -name '*.j' |");
my @FILES = <FILES>;  chomp(@FILES);
foreach (@FILES) {  s|^./||;  }
close(FILES);
if (!@FILES) { die "No disassembled classes found. Run dasm first.\n"; }


################################################################################
# regexp kungfu

# Match $ in class name for inner classes 
my $classid       = "([0-9a-zA-Z_\$]*)";
my $pathid        = "([0-9a-zA-Z_\$/]*)";
my $valid_pattern = "([0-9a-zA-Z_\$/*]*)";

# Make regexp from command-line pattern
my $re_match = $ARGV[0];
if (!$re_match || !($re_match =~ m/^$valid_pattern$/)) { die "Invalid pattern: '$ARGV[0]'\n"; }
$re_match =~ s|\*\*|<starstar>|g;
$re_match =~ s|\*|$classid|g;
$re_match =~ s|<starstar>|$pathid|g;
$re_match = qr|($re_match)|;

my $re_dest = $ARGV[1];
if (!$re_dest || !($re_dest =~ m/^$valid_pattern$/)) { die "Invalid destination: '$ARGV[1]'\n"; }
# and quote for future eval
$re_dest = '"' . $re_dest . '"';
# and bump up ref numbers ('$0' becomes '$1', '$1' becomes '$2' etc)
$re_dest =~ s|\$([0-9]+)| '$' . ($1 + 1) |eg;


#print "pattern: '$re_match'\n";
#print "dest   : '$re_dest'\n";

# Test variable regular expressions:
#my $s = "aaa/foo";
#$s =~ s|$re_match|$re_dest|ee;
#$s =~ s|(z*)$re_match|$re_dest2|ee;
#print "s: '$s'\n";


##########################################################################

use rename_classes;

sub autorename_renamer
{
    my ($class) = @_;

    # Keep inner and outer classes together.
    # Works as long as inner classes are processed after outer.
    if ($class =~ m|^([^\$]*)\$(.*)$|)
    {
	my ($outer, $inner) = ($1, $2);
	if (class_mapping($outer))
	{   return class_mapping($outer) . "\$$inner";   }
    }

    my $newclass = $class;
    $newclass =~ s|^$re_match$|$re_dest|ee;
    
    if ($newclass ne $class)
    {
	my $orig = $newclass;
	for (my $x = "a";  (-f "$newclass.j") || rev_class_mapping($newclass);  $x++)
	{    $newclass = "$orig$x";    }
	if ($newclass ne $orig)  {  print "auto_rename: $class -> $newclass\n";  }
    }
    
    return $newclass;
}

sub regexp_renamer
{
    my ($class) = @_;
    $class =~ s|^$re_match$|$re_dest|ee;
    return $class;
}


# First pass: get class mappings and sanity checks
if ($auto_rename)
{   get_class_mapping(\@FILES, \&autorename_renamer, 1);  }
else
{   get_class_mapping(\@FILES, \&regexp_renamer, 1);  }


# Main loop
rename_classes(@FILES);

