#!/usr/bin/perl
# dump info on class hierachy and interfaces
use strict;
#use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";	 # Find modules in ../lib
use common;

global_init();

sub usage
{    
    print q{
usage: xdo classinfo [-cp classpath]

dump info on class hierachy and interfaces.
following files are created:

class_extends:
  lists parent class of each class in the jar. format:
  "class:parent_class"

class_implements:
  interfaces implemented by each class in the jar. format:
  "class:interface [interface...]"

interfaces:
  lists all interfaces in the jar.

class_hierarchy:
  full class hierarchy for each class in the jar. format:
  "class > parent [...] > java/lang/Object"

class_hierarchy_fancy
  same as class_hierarchy but formatted as a tree, also
  showing interfaces implemented by each class.


Options:
  -classpath classpath    specify external jar dependencies
  -cp        classpath

};
    exit 1;
}

for (; @ARGV && $ARGV[0] =~ m/^-/; shift @ARGV)
{
    if ($ARGV[0] =~ m/^(-h|-help|--help)$/)  {  usage();  }
    die "unknown option: $ARGV[0]\n";
}

(-d "jar") || die "No jar directory, open a jar first.\n";
chdir "jar" || die "Couldn't cd jar/\n";

open(FILES, "find . -name '*.j' |");
my @FILES = <FILES>;  chomp(@FILES);
close(FILES);
if (!@FILES) { die "No disassembled classes found. Run dasm first.\n"; }

################################################################################

use class_info;
get_class_info(@FILES);

################################################################################

print "Writing class_extends ...\n";
open(OUT, "> ../class_extends");
foreach my $class (classes())
{  
    if (!external_class($class))
    {   printf OUT ("%s:%s\n", $class, parent_class($class));   }
}
close(OUT);

print "Writing class_implements ...\n";
open(OUT, "> ../class_implements");
foreach my $class (classes())
{  
    if (!external_class($class))
    {
	my $interfaces = join(", ", implemented_interfaces($class));
	printf OUT ("%s:%s\n", $class, $interfaces);  
    }
}
close(OUT);

print "Writing interfaces ...\n";
open(OUT, "> ../interfaces");
foreach my $interface (interfaces())
{  
    if (!external_class($interface))
    {   print OUT "$interface\n";   }
}
close(OUT);

print "Writing class_hierarchy ...\n";
open(OUT,  "> ../class_hierarchy");
foreach my $class (classes())
{
    if (external_class($class))  {  next;  }
    
    my $s = "";
    if (extended($class)) { next; }
    $s .= "$class";  $class = parent_class($class);
    for (; $class; $class = parent_class($class))
    {  $s .= " > $class";  }
    
    print OUT "$s\n";
}
close(OUT);

print "Writing class_hierarchy_fancy ...\n";
open(OUT, "> ../class_hierarchy_fancy");
foreach my $class (classes())
{
    if (external_class($class))  {  next;  }
    if (extended($class))        {  next;  }    
    
    my $indent = 0;
    for (; $class; $class = parent_class($class), $indent += 2)
    {		
	my $indented_class = sprintf("%*s%s", $indent, "", $class);
	my $interfaces = join(",", implemented_interfaces($class));
	if ($interfaces)  {  $interfaces = "[ $interfaces ]";  }
	printf OUT ("%-30s %s\n", $indented_class, $interfaces);
    }
    print OUT "\n";
}


# todo interfaces_implemented

